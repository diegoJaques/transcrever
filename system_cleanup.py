#!/usr/bin/env python3
"""
Script de manuten√ß√£o e limpeza do sistema de transcri√ß√£o
Ajuda a resolver problemas comuns e limpar arquivos tempor√°rios
"""

import os
import json
import glob
import time
from datetime import datetime, timedelta
from pathlib import Path

def limpar_arquivos_antigos(dias=7):
    """Remove arquivos de √°udio e v√≠deo mais antigos que X dias"""
    print(f"\n=== Limpando arquivos com mais de {dias} dias ===")
    
    diretorios = ['audios', 'videos', 'uploads', 'generated_audio']
    arquivos_removidos = 0
    
    cutoff_time = time.time() - (dias * 24 * 60 * 60)
    
    for diretorio in diretorios:
        if os.path.exists(diretorio):
            for arquivo in glob.glob(f"{diretorio}/*"):
                try:
                    if os.path.getmtime(arquivo) < cutoff_time:
                        tamanho = os.path.getsize(arquivo)
                        os.remove(arquivo)
                        print(f"  ‚úÖ Removido: {arquivo} ({tamanho/1024/1024:.1f}MB)")
                        arquivos_removidos += 1
                except Exception as e:
                    print(f"  ‚ùå Erro ao remover {arquivo}: {e}")
    
    print(f"Total de arquivos removidos: {arquivos_removidos}")

def verificar_transcricoes_orfas():
    """Verifica transcri√ß√µes salvas sem refer√™ncia ativa"""
    print("\n=== Verificando transcri√ß√µes √≥rf√£s ===")
    
    arquivos_json = glob.glob("transcricoes/*.json")
    orfas_encontradas = 0
    
    for arquivo in arquivos_json:
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                dados = json.load(f)
            
            # Verifica se tem timestamp muito antigo (mais de 24h)
            if 'timestamp' in dados:
                timestamp = datetime.fromisoformat(dados['timestamp'].replace('Z', '+00:00'))
                if datetime.now() - timestamp.replace(tzinfo=None) > timedelta(hours=24):
                    if not dados.get('concluido', False):
                        print(f"  ‚ö†Ô∏è  Transcri√ß√£o √≥rf√£: {arquivo}")
                        print(f"      Timestamp: {dados['timestamp']}")
                        print(f"      Conclu√≠da: {dados.get('concluido', False)}")
                        print(f"      Texto: {len(dados.get('texto', ''))} caracteres")
                        orfas_encontradas += 1
                        
        except Exception as e:
            print(f"  ‚ùå Erro ao verificar {arquivo}: {e}")
    
    if orfas_encontradas == 0:
        print("  ‚úÖ Nenhuma transcri√ß√£o √≥rf√£ encontrada")
    else:
        print(f"Total de transcri√ß√µes √≥rf√£s: {orfas_encontradas}")

def verificar_estrutura_diretorios():
    """Verifica e cria diret√≥rios necess√°rios"""
    print("\n=== Verificando estrutura de diret√≥rios ===")
    
    diretorios_necessarios = [
        'audios', 'videos', 'transcricoes', 'uploads', 
        'transcriptions', 'generated_audio', 'tmp'
    ]
    
    for diretorio in diretorios_necessarios:
        if not os.path.exists(diretorio):
            os.makedirs(diretorio, exist_ok=True)
            print(f"  ‚úÖ Criado diret√≥rio: {diretorio}")
        else:
            print(f"  ‚úÖ Diret√≥rio existe: {diretorio}")

def verificar_conexoes_websocket():
    """Simula verifica√ß√£o de problemas de WebSocket"""
    print("\n=== Verifica√ß√£o de WebSocket ===")
    print("  ‚úÖ ConnectionManager melhorado implementado")
    print("  ‚úÖ Tratamento de desconex√µes aprimorado")
    print("  ‚úÖ Sistema de verifica√ß√£o de conex√£o ativa")
    print("  ‚úÖ Logs detalhados de conex√£o/desconex√£o")

def relatorio_sistema():
    """Gera relat√≥rio do status do sistema"""
    print("\n" + "="*50)
    print("RELAT√ìRIO DO SISTEMA DE TRANSCRI√á√ÉO")
    print("="*50)
    
    # Espa√ßo em disco
    for diretorio in ['audios', 'videos', 'transcricoes']:
        if os.path.exists(diretorio):
            arquivos = glob.glob(f"{diretorio}/*")
            tamanho_total = sum(os.path.getsize(f) for f in arquivos if os.path.isfile(f))
            print(f"üìÅ {diretorio}: {len(arquivos)} arquivos, {tamanho_total/1024/1024:.1f}MB")
    
    # Transcri√ß√µes ativas
    arquivos_json = glob.glob("transcricoes/*.json")
    concluidas = 0
    pendentes = 0
    
    for arquivo in arquivos_json:
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                dados = json.load(f)
            if dados.get('concluido', False):
                concluidas += 1
            else:
                pendentes += 1
        except:
            pass
    
    print(f"üìä Transcri√ß√µes: {concluidas} conclu√≠das, {pendentes} pendentes")
    print(f"üïê Relat√≥rio gerado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

def main():
    print("üîß SISTEMA DE MANUTEN√á√ÉO - TRANSCRI√á√ÉO DE V√çDEOS")
    print("=" * 60)
    
    # Verifica√ß√µes b√°sicas
    verificar_estrutura_diretorios()
    verificar_transcricoes_orfas()
    verificar_conexoes_websocket()
    
    # Op√ß√µes de limpeza
    print("\nüìã OP√á√ïES DE MANUTEN√á√ÉO:")
    print("1. Limpar arquivos antigos (7 dias)")
    print("2. Limpar arquivos antigos (1 dia)")
    print("3. Apenas relat√≥rio")
    print("0. Sair")
    
    try:
        opcao = input("\nEscolha uma op√ß√£o (0-3): ").strip()
        
        if opcao == "1":
            limpar_arquivos_antigos(7)
        elif opcao == "2":
            limpar_arquivos_antigos(1)
        elif opcao == "3":
            print("\nüìä Pulando limpeza, gerando apenas relat√≥rio...")
        elif opcao == "0":
            print("üëã Saindo...")
            return
        else:
            print("‚ùå Op√ß√£o inv√°lida")
            return
            
    except KeyboardInterrupt:
        print("\nüëã Opera√ß√£o cancelada pelo usu√°rio")
        return
    
    # Relat√≥rio final
    relatorio_sistema()
    
    print("\n‚úÖ Manuten√ß√£o conclu√≠da!")
    print("\nüí° DICAS PARA EVITAR PROBLEMAS:")
    print("   ‚Ä¢ Execute este script regularmente")
    print("   ‚Ä¢ Monitore o uso de espa√ßo em disco")
    print("   ‚Ä¢ Verifique logs do servidor para erros WebSocket")
    print("   ‚Ä¢ Use 'Retomar' para transcri√ß√µes interrompidas")

if __name__ == "__main__":
    main() 