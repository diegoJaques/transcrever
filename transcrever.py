import whisper
import os
import yt_dlp
import sys
from datetime import datetime

def verificar_ffmpeg():
    """Verifica se o FFmpeg est√° instalado e acess√≠vel"""
    try:
        os.system('ffmpeg -version')
        return True
    except:
        print("\n‚ùå ERRO: FFmpeg n√£o encontrado!")
        print("Por favor, instale o FFmpeg:")
        print("1. Windows: Baixe de https://www.gyan.dev/ffmpeg/builds/")
        print("2. Linux: sudo apt install ffmpeg")
        print("3. MacOS: brew install ffmpeg")
        return False

def criar_diretorios():
    """Cria os diret√≥rios necess√°rios se n√£o existirem"""
    diretorios = ['audios', 'videos', 'transcricoes']
    for dir in diretorios:
        os.makedirs(dir, exist_ok=True)
        print(f"‚úì Diret√≥rio '{dir}' verificado")

def baixar_audio_youtube(url):
    """Baixa o √°udio de um v√≠deo do YouTube"""
    print(f"\nüì• Baixando √°udio do YouTube: {url}")
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'audios/audio.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
        }],
        'quiet': True,
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        print("‚úì √Åudio baixado com sucesso!")
        return 'audios/audio.mp3'
    except Exception as e:
        print(f"‚ùå Erro ao baixar v√≠deo: {str(e)}")
        return None

def extrair_audio_video(caminho_video):
    """Extrai o √°udio de um v√≠deo local"""
    print(f"\nüéµ Extraindo √°udio do v√≠deo: {caminho_video}")
    nome_audio = os.path.splitext(os.path.basename(caminho_video))[0] + ".mp3"
    caminho_audio = os.path.join('audios', nome_audio)
    
    try:
        comando = f'ffmpeg -y -i "{caminho_video}" -vn -acodec mp3 "{caminho_audio}"'
        os.system(comando)
        print("‚úì √Åudio extra√≠do com sucesso!")
        return caminho_audio
    except Exception as e:
        print(f"‚ùå Erro ao extrair √°udio: {str(e)}")
        return None

def transcrever_audio(caminho_audio, idioma='pt'):
    """Transcreve o √°udio usando o modelo Whisper"""
    print(f"\nüéØ Iniciando transcri√ß√£o...")
    try:
        resultado = modelo.transcribe(caminho_audio, language=idioma)
        print("‚úì Transcri√ß√£o conclu√≠da!")
        return resultado['text']
    except Exception as e:
        print(f"‚ùå Erro na transcri√ß√£o: {str(e)}")
        return None

def salvar_transcricao(texto, nome_arquivo):
    """Salva a transcri√ß√£o em um arquivo"""
    if not texto:
        print("‚ùå Nenhum texto para salvar!")
        return False
        
    try:
        caminho = os.path.join('transcricoes', nome_arquivo)
        with open(caminho, 'w', encoding='utf-8') as arquivo:
            arquivo.write(texto)
        print(f"‚úì Transcri√ß√£o salva em: {caminho}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar transcri√ß√£o: {str(e)}")
        return False

def menu():
    """Menu principal do programa"""
    while True:
        print("\n" + "="*50)
        print("üé• SISTEMA DE TRANSCRI√á√ÉO DE V√çDEOS")
        print("="*50)
        print("[1] üì∫ Transcrever v√≠deo do YouTube")
        print("[2] üìÅ Transcrever v√≠deo local")
        print("[3] ‚ÑπÔ∏è  Informa√ß√µes sobre o sistema")
        print("[4] ‚ùå Sair")
        print("="*50)
        
        escolha = input("\nEscolha uma op√ß√£o (1-4): ")

        if escolha == '4':
            print("\nüëã Obrigado por usar o sistema!")
            break

        elif escolha == '3':
            print("\n‚ÑπÔ∏è  Informa√ß√µes do Sistema:")
            print(f"Python: {sys.version.split()[0]}")
            print(f"Whisper Modelo: {modelo.model_name}")
            print(f"Diret√≥rio atual: {os.getcwd()}")
            print(f"FFmpeg instalado: {'Sim' if verificar_ffmpeg() else 'N√£o'}")
            input("\nPressione ENTER para continuar...")

        elif escolha == '1':
            url = input("\nüîó Cole a URL do v√≠deo do YouTube: ")
            if not url:
                print("‚ùå URL inv√°lida!")
                continue
                
            audio = baixar_audio_youtube(url)
            if audio and os.path.exists(audio):
                texto = transcrever_audio(audio)
                if texto:
                    nome_arquivo = f"youtube_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                    salvar_transcricao(texto, nome_arquivo)

        elif escolha == '2':
            caminho_video = input("\nüìÅ Digite o caminho completo do v√≠deo: ")
            if not os.path.exists(caminho_video):
                print("‚ùå Arquivo n√£o encontrado!")
                continue
                
            audio = extrair_audio_video(caminho_video)
            if audio and os.path.exists(audio):
                texto = transcrever_audio(audio)
                if texto:
                    nome_arquivo = os.path.splitext(os.path.basename(caminho_video))[0] + ".txt"
                    salvar_transcricao(texto, nome_arquivo)

        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    try:
        print("\nüöÄ Iniciando sistema de transcri√ß√£o...")
        
        # Verifica FFmpeg
        if not verificar_ffmpeg():
            sys.exit(1)
            
        # Cria diret√≥rios necess√°rios
        criar_diretorios()
        
        # Carrega o modelo Whisper
        print("\nüì¶ Carregando modelo Whisper (pode demorar alguns minutos na primeira vez)...")
        modelo = whisper.load_model('small')
        print("‚úì Modelo carregado com sucesso!")
        
        # Inicia o menu principal
        menu()
        
    except KeyboardInterrupt:
        print("\n\nüëã Programa encerrado pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
        sys.exit(1) 